{"version":3,"sources":["actions/books.js","components/Layout.jsx","containers/Books.jsx","components/Book.jsx","App.js","serviceWorker.js","reducers/books.js","index.js"],"names":["fetchBooks","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","res","wrap","_context","prev","next","type","axios","get","sent","payload","formatResults","data","results","t0","stop","this","_x","apply","arguments","lists","metadata","objectWithoutProperties","Layout","props","render","react_default","createElement","className","children","Books","_this","loading","error","onClick","bestSellers","map","category","index","key","display_name","books","book","i","Link","to","pathname","concat","title","state","src","book_image","alt","author","width","style","borderRadius","Component","connect","nyTimesBooks","fetching","bindActionCreators","Book","location","history","goBack","marginTop","book_image_width","height","book_image_height","maxWidth","padding","description","buy_links","link","window","open","url","name","Redirect","App","components_Layout","BrowserRouter","Switch","Route","path","component","objectSpread","Boolean","hostname","match","intialState","middleware","thunk","composedEnhancers","compose","applyMiddleware","store","createStore","combineReducers","length","undefined","action","ReactDOM","react_redux_es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bbbb125e.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const FETCH_BOOKS = 'FETCH_BOOKS';\nexport const FETCH_BOOKS_SUCCESS = 'FETCH_BOOKS_SUCCESS';\nexport const FETCH_BOOKS_ERROR = 'FETCH_BOOKS_ERROR';\n\nexport const fetchBooks = () => {\n    return async (dispatch) => {\n        dispatch({\n            type: FETCH_BOOKS\n        })\n        try {\n            const res = await axios.get('http://api.nytimes.com/svc/books/v3/lists/overview?api-key=JeIs16fnxd3wCBFDqGrSKUDhEMS2OLVh');\n            dispatch({\n                type: FETCH_BOOKS_SUCCESS,\n                payload: formatResults(res.data.results)\n            });\n        } catch (error) {\n            dispatch({\n                type: FETCH_BOOKS_ERROR,\n                payload: error\n            });\n        }\n\n    };\n\n}\n\nconst formatResults = (results) => {\n    const { lists, ...metadata } = results;\n    return {\n        metadata: metadata,\n        lists: lists\n    }\n}","import React from 'react';\n\nconst Layout = (props) => ({\n    render() {\n        return (\n            <div className=\"app-container\">\n                <div className=\"header shadow\">\n                    <h2 className=\"heading\">Best Sellers</h2>\n                </div>\n                <main>{props.children}</main>\n            </div>\n        );\n    }\n});\n\nexport default Layout;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { fetchBooks } from '../actions/books';\n\n\nimport '../css/books.css';\n\nclass Books extends Component {\n\n    render() {\n        return (\n            <div className=\"container\">\n                {this.props.loading ? (\n                    <div className=\"loading\">\n                        loading...\n                    </div>) : null}\n                {this.props.error ? (<div>\n                    <div className=\"loading\">\n                        <div>\n                            an error has occured, please try again\n                       </div>\n                        <div>\n                            <button\n                                onClick={() => this.props.fetchBooks()}\n                                className=\"btn\">Refresh</button>\n                        </div>\n                    </div>\n                </div>) : null}\n                <div className=\"row\">\n                    <div className=\"col align-end\">\n                        <button\n                            onClick={() => this.props.fetchBooks()}\n                            className=\"btn shadow\">Refresh</button>\n                    </div>\n                </div>\n                {this.props.bestSellers.lists.map((category, index) => {\n                    return (\n                        <div className=\"books-container\" key={index}>\n                            <div className=\"row\">\n                                <div className=\"col\">\n                                    <p className=\"category\">{category.display_name || 'Unknown'}</p>\n                                </div>\n                            </div>\n                            <div className=\"row\">\n                                {category.books.map((book, i) => {\n                                    return (\n                                        <div className=\"col books\" key={i}>\n                                            <Link to={{ pathname: `/books/${book.title}`, state: book }}>\n                                                <img className=\"book-image shadow\" src={book.book_image} alt={book.author} width=\"50%\"\n                                                    style={{ borderRadius: '5px' }} />\n                                            </Link>\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        </div>\n                    );\n                })}\n\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = ({ nyTimesBooks }) => {\n    return {\n        bestSellers: nyTimesBooks.bestSellers,\n        loading: nyTimesBooks.fetching,\n        metadata: nyTimesBooks.metadata,\n        error: nyTimesBooks.error\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return bindActionCreators({\n        fetchBooks\n    }, dispatch)\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Books);","import React from 'react';\n\nimport { Redirect } from 'react-router-dom';\n\nimport '../css/book.css';\n\nconst Book = (props) => {\n    const book = props.location.state;\n    if (!book) {\n        return <Redirect to=\"/books\" />\n    }\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col align-end\">\n                    <button\n                        onClick={() => props.history.goBack()}\n                        className=\"btn shadow\">Back</button>\n                </div>\n            </div>\n            <div className=\"row\">\n            </div>\n            <div className=\"row\" style={{\n                marginTop: '2rem'\n            }}>\n                <div className=\"col image-container\">\n                    <img\n                        className=\"shadow\"\n                        src={book.book_image} alt={book.title}\n                        width={book.book_image_width} height={book.book_image_height}\n                        style={{\n                            maxWidth: '100%'\n                        }} />\n                </div>\n                <div className=\"col\" style={{\n                    padding: '1rem'\n                }}>\n                    <div>\n                        <h3 className=\"book-title\">{book.title}</h3>\n                        <p>by <span className=\"book-author\">\n                            {book.author}\n                        </span></p>\n                    </div>\n                    <p className=\"book-description\">{book.description}</p>\n                    <div>\n                        <p className=\"book-purchase\">Purchase</p>\n                        {book.buy_links.map(link => {\n                            return (\n                                <button\n                                    onClick={() => window.open(link.url, '_blank')}\n                                    key={link.name}\n                                    type=\"button\"\n                                    className=\"book-purchase-link btn btn-primary shadow\">{link.name}\n                                </button>\n                            );\n                        })}\n\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    );\n};\n\nexport default Book;","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\n\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { fetchBooks } from './actions/books';\n\nimport Layout from './components/Layout';\nimport Books from './containers/Books';\n\nimport './App.css';\nimport Book from './components/Book';\n\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.fetchBooks();\n  }\n\n  render() {\n    return (\n      <Layout>\n        <BrowserRouter>\n          <Switch>\n            <Route path=\"/books/:id\" component={Book} />\n            <Route path=\"/books\" component={Books} />\n            <Redirect to=\"/books\" />\n          </Switch>\n        </BrowserRouter>\n\n      </Layout>\n    );\n  }\n}\n\nconst mapStateToProps = ({ nyTimesBooks }) => {\n  return {\n    ...nyTimesBooks\n  }\n};\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    fetchBooks\n  }, dispatch)\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { FETCH_BOOKS, FETCH_BOOKS_SUCCESS } from '../actions/books';\n\nconst intialState = {\n    bestSellers: {\n        metadata: {},\n        lists: []\n    },\n    fetching: false,\n    error: null\n};\n\nexport default (state = intialState, action) => {\n    switch (action.type) {\n        case FETCH_BOOKS:\n            return {\n                ...state,\n                fetching: true,\n                error: null\n            };\n        case FETCH_BOOKS_SUCCESS:\n            return {\n                ...state,\n                fetching: false,\n                error: null,\n                bestSellers: action.payload\n            };\n        case 'FETCH_BOOKS_ERROR':\n            return {\n                ...state,\n                fetching: false,\n                error: action.payload,\n                bestSellers: {}\n            };\n        default:\n            return {\n                ...state\n            };\n    }\n};\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport thunk from 'redux-thunk';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport nyTimesBooks from './reducers/books';\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\n\nconst initialState = {};\nconst enhancers = [];\nconst middleware = [thunk];\n\n\nif (process.env.NODE_ENV === 'development') {\n    const devToolsExtension = window.__REDUX_DEVTOOLS_EXTENSION__\n\n    if (typeof devToolsExtension === 'function') {\n        enhancers.push(devToolsExtension())\n    }\n}\n\n// redux store composition\nconst composedEnhancers = compose(\n    applyMiddleware(...middleware),\n    ...enhancers\n)\n\nconst store = createStore(\n    combineReducers({ nyTimesBooks }),\n    initialState,\n    composedEnhancers\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}